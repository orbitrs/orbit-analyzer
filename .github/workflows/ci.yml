name: CI

# Improved CI workflow for orlint with proper dependency handling

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  pull-requests: read
  id-token: write

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Format & Lint
    runs-on: ubuntu-latest
    steps:
      # Create workspace directory for handling dependencies
      - name: Create workspace directory
        run: mkdir -p $GITHUB_WORKSPACE/orbitrs-workspace

      # Checkout repositories in workspace structure
      - name: Checkout orlint
        uses: actions/checkout@v4
        with:
          path: orbitrs-workspace/orlint

      - name: Checkout orbit
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbit
          path: orbitrs-workspace/orbit

      # Install tools and dependencies
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfontconfig1-dev libfreetype6-dev
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: orbitrs-workspace -> target
          
      # Create a workspace Cargo.toml at the root
      - name: Create workspace Cargo.toml
        working-directory: orbitrs-workspace
        shell: bash
        run: |
          cat > Cargo.toml << 'EOF'
          [workspace]
          members = [
              "orlint",
              "orbit"
          ]
          resolver = "2"

          [workspace.dependencies]
          orbit = { path = "orbit", version = "0.1.10" }
          serde = { version = "1.0", features = ["derive"] }
          thiserror = "1.0"
          EOF
            
      # Run format check from workspace root
      - name: Check code formatting
        working-directory: orbitrs-workspace
        run: cargo fmt --all -- --check
        
      # Run clippy from workspace root but only for orlint
      - name: Run clippy
        working-directory: orbitrs-workspace
        run: cargo clippy --package orlint --all-targets -- -D warnings
        
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: check
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
      fail-fast: false
    steps:
      # Create workspace directory for handling dependencies
      - name: Create workspace directory
        run: mkdir -p ${{ github.workspace }}/orbitrs-workspace

      # Checkout repositories in workspace structure
      - name: Checkout orlint
        uses: actions/checkout@v4
        with:
          path: orbitrs-workspace/orlint

      - name: Checkout orbit
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbit
          path: orbitrs-workspace/orbit
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: orbitrs-workspace -> target
          key: ${{ matrix.target }}
      
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfontconfig1-dev libfreetype6-dev
          
      # Create workspace Cargo.toml at the root
      - name: Create workspace Cargo.toml
        working-directory: orbitrs-workspace
        shell: bash
        run: |
          cat > Cargo.toml << 'EOF'
          [workspace]
          members = [
              "orlint",
              "orbit"
          ]
          resolver = "2"

          [workspace.dependencies]
          orbit = { path = "orbit", version = "0.1.10" }
          serde = { version = "1.0", features = ["derive"] }
          thiserror = "1.0"
          EOF
      
      # Run tests from workspace root but only for orlint
      - name: Run tests
        working-directory: orbitrs-workspace
        run: RUSTFLAGS="--cfg ignore_wayland_tests" cargo test --package orlint --target ${{ matrix.target }} --all-features --verbose
        shell: bash
        
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: check
    timeout-minutes: 15
    steps:
      # Create workspace directory for handling dependencies
      - name: Create workspace directory
        run: mkdir -p ${{ github.workspace }}/orbitrs-workspace

      # Checkout repositories in workspace structure
      - name: Checkout orlint
        uses: actions/checkout@v4
        with:
          path: orbitrs-workspace/orlint

      - name: Checkout orbit
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbit
          path: orbitrs-workspace/orbit
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit
      
      # Create workspace Cargo.toml at the root
      - name: Create workspace Cargo.toml
        working-directory: orbitrs-workspace
        shell: bash
        run: |
          cat > Cargo.toml << 'EOF'
          [workspace]
          members = [
              "orlint",
              "orbit"
          ]
          resolver = "2"

          [workspace.dependencies]
          orbit = { path = "orbit", version = "0.1.10" }
          serde = { version = "1.0", features = ["derive"] }
          thiserror = "1.0"
          EOF
      
      # Run audit from workspace root
      - name: Run security audit
        working-directory: orbitrs-workspace
        run: cargo audit
        
  outdated-dependencies:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    needs: check
    timeout-minutes: 15
    steps:
      # Create workspace directory for handling dependencies
      - name: Create workspace directory
        run: mkdir -p ${{ github.workspace }}/orbitrs-workspace

      # Checkout repositories in workspace structure
      - name: Checkout orlint
        uses: actions/checkout@v4
        with:
          path: orbitrs-workspace/orlint

      - name: Checkout orbit
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbit
          path: orbitrs-workspace/orbit
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-outdated
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-outdated
      
      # Create workspace Cargo.toml at the root
      - name: Create workspace Cargo.toml
        working-directory: orbitrs-workspace
        shell: bash
        run: |
          cat > Cargo.toml << 'EOF'
          [workspace]
          members = [
              "orlint",
              "orbit"
          ]
          resolver = "2"

          [workspace.dependencies]
          orbit = { path = "orbit", version = "0.1.10" }
          serde = { version = "1.0", features = ["derive"] }
          thiserror = "1.0"
          EOF
          
      # Run outdated from workspace root
      - name: Check for outdated dependencies
        working-directory: orbitrs-workspace
        run: cargo outdated --packages orlint --exit-code 0
