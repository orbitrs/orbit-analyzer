<template>
  <div class="button-container">
    <button @click="handleClick" class="button">
      {{ label }}
    </button>
  </div>
</template>

<code lang="rust">
component Button {
  // Props with type annotations
  props {
    label: string;
    isPrimary: boolean;
    isDisabled: boolean;
    onClick: () => void;
  }

  // State variables with type annotations
  state {
    clickCount: number;
    lastClickTime: number | null;
  }

  // Component lifecycle methods
  mounted() {
    console.log("Button component mounted");
    this.clickCount = 0;
    this.lastClickTime = null;
    
    // Set default values for props if needed
    if (this.label === undefined) this.label = "Click Me";
    if (this.isPrimary === undefined) this.isPrimary = true;
    if (this.isDisabled === undefined) this.isDisabled = false;
    if (this.onClick === undefined) this.onClick = () => {};
  }
  
  updated() {
    console.log("Button component updated");
  }

  // Event handler with proper typing
  handleClick() {
    if (this.isDisabled) {
      return;
    }
    
    this.clickCount += 1;
    this.lastClickTime = Date.now();
    this.onClick();
  }

  // Accessor method
  getClickCount(): number {
    return this.clickCount;
  }
}
</code>

<style>
.button-container {
  display: flex;
  justify-content: center;
  margin: 10px 0;
}

button {
  padding: 8px 16px;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  border: 1px solid #ccc;
  background-color: #f5f5f5;
}

button.primary {
  background-color: #0066cc;
  color: white;
  border-color: #0055aa;
}

button.disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
</style>
